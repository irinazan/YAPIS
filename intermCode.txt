Для исходного кода программы coroutine_test.elset:

Результирующий код:
class Element {

    private final String data;

    public Element(String data) {
        this.data = data;
    }

    @Override
    public String toString() {
        return data;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj instanceof Element) {
            return ((Element) obj).data.equals(data);
        }
        return false;
    }

    @Override
    public int hashCode() {
        return Objects.hash(data);
    }

}

class Set implements Iterable<Element> {

    private final java.util.Set<Element> set = new HashSet<>();

    public Set() {
    }

    public boolean add(Element element) {
        return set.add(element);
    }

    public boolean remove(Element element) {
        return set.remove(element);
    }

    public int size() {
        return set.size();
    }

    public void clear() {
        set.clear();
    }

    public static Set union(Set s1, Set s2) {
        Set out = new Set();
        out.set.addAll(s1.set);
        out.set.addAll(s2.set);
        return out;
    }


    public static Set intersection(Set s1, Set s2) {
        Set out = new Set();
        for (Element el : s1.set) {
            if (s2.set.contains(el)) {
                out.add(el);
            }
        }
        for (Element el : s2.set) {
            if (s1.set.contains(el)) {
                out.add(el);
            }
        }
        return out;
    }

    public static Set diff(Set s1, Set s2) {
        Set out = new Set();
        out.set.addAll(s1.set);
        for (Element el : s2.set) {
            if (s1.set.contains(el)) {
                out.remove(el);
            }
        }
        return out;
    }


    public static Set simDiff(Set s1, Set s2) {
        Set out = new Set();
        out.set.addAll(s1.set);
        out.set.addAll(s2.set);
        for (Element el : s1.set) {
            if (s2.set.contains(el)) {
                out.remove(el);
            }
        }
        for (Element el : s2.set) {
            if (s1.set.contains(el)) {
                out.remove(el);
            }
        }
        return out;
    }

    @Override
    public String toString() {
        return set.toString();
    }
    @Override
public Iterator<Element> iterator() {
   return set.iterator();
}
}

block_non_return 
  global_assign_var global
    assign_var 
      type_1 int
      TEN=
      digit_expression 10
      ;
  subprogram_return sub_program
    type int
    fun
    signature (
      type int
      a)
    coroutine_return begin
      statement 
        assign_var 
          type_1 int
          var=
          digit_expression 
            digit_expression a
            +
            digit_expression 1
          ;
      returnvar;end

Промежуточный код:
program main_program
    block begin
      statement 
        assign_var 
          type_1 int
          a=
          digit_expression 1
          ;
      statement 
        assign_var_method_invocation 
          type int
          constc=
          block_return callfun
            yield (a)
            ;
      statement 
        assign_var 
          type_1 element
          el1=
          intialize_element "first"
          ;
      statement 
        assign_var 
          type_1 element
          el2=
          intialize_element "second"
          ;
      statement 
        assign_set sets=
          intialize_set {el1,el2}
          ;
      statement 
        print print(s);
      statement 
        operarions_with_set s.remove(el2);
      statement 
        print print(s);
      statement 
        assign_set seth=
          intialize_set s*s
          ;
      statement 
        print print(h);
      statement 
        assign_var 
          type_1 int
          i=
          digit_expression 0
          ;
      statement 
        while_cicle while(
          simple_compare 
            digit_expression i
            <
            digit_expression 5
          )
          block begin
            statement 
              operations i=
                digit_expression 
                  digit_expression i
                  +
                  digit_expression 1
                ;
            statement 
              print print(i);
            end
      statement 
        if_then if(
          simple_compare 
            digit_expression i
            ==
            digit_expression 5
          )
          block begin
            statement 
              assign_var 
                type_1 element
                el3=
                intialize_element "third"
                ;
            statement 
              assign_set setm=
                intialize_set {el3}
                ;
            statement 
              assign_set setk=
                intialize_set s/m
                ;
            statement 
              print print(k);
            end
          then
          block beginend
      statement 
        for_each for(elemente:s)
          block begin
            statement 
              print print(e);
            end
      end